{"version":3,"sources":["Welcome.js","UserInfo.js","Logout.js","Secured.js","App.js","serviceWorker.js","index.js"],"names":["Welcome","react_default","a","createElement","className","Component","UserInfo","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","name","email","id","keycloak","loadUserInfo","then","userInfo","setState","sub","Logout","history","push","console","log","JSON","stringify","onClick","logout","withRouter","Secured","authenticated","_this2","Keycloak","init","onLoad","src_UserInfo","src_Logout","App","react_router_dom","to","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a9eaeb1f.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Welcome extends Component {\n    render() {\n        return (\n            <div className=\"Welcome\">\n                <p>This is your public-facing component.</p>\n            </div>\n        );\n    }\n}\nexport default Welcome;","import React, { Component } from 'react';\n\nclass UserInfo extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: \"\",\n            email: \"\",\n            id: \"\"\n        };\n        this.props.keycloak.loadUserInfo().then(userInfo => {\n            this.setState({name: userInfo.name, email: userInfo.email, id: userInfo.sub})\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"UserInfo\">\n                <p>Name: {this.state.name}</p>\n                <p>Email: {this.state.email}</p>\n                <p>ID: {this.state.id}</p>\n            </div>\n        );\n    }\n}\nexport default UserInfo;","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\n\nclass Logout extends Component {\n  logout() {\n    this.props.history.push('/');\n    console.log('hola ' + JSON.stringify(this.props));\n    //this.props.Keycloak.logout();\n    //this.Keycloak.logout({ redirectUri: 'http://localhost:3000' });\n  }\n\n  render() {\n    return <button onClick={() => this.logout()}>Logout</button>;\n  }\n}\nexport default withRouter(Logout);\n","import React, { Component } from 'react';\nimport Keycloak from 'keycloak-js';\nimport UserInfo from './UserInfo';\nimport Logout from './Logout';\n\nclass Secured extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { keycloak: null, authenticated: false };\n  }\n\n  componentDidMount() {\n    console.log(\"yosersito\")\n    const keycloak = Keycloak('/keycloak.json');\n    keycloak.init({ onLoad: 'login-required' }).then((authenticated) => {\n      console.log(\"yoser\") ;\n      console.log(authenticated);\n      this.setState({ keycloak: keycloak, authenticated: authenticated });\n      console.log(this.state);\n    });\n  }\n\n  render() {\n    if (this.state.keycloak) {\n      if (this.state.authenticated)\n      {\n        return (\n          <div>\n            <p>\n              This is a Keycloak-secured component of your application. You\n              shouldn't be able to see this unless you've authenticated with\n              Keycloak.\n            </p>\n            <UserInfo keycloak={this.state.keycloak} />\n            <Logout keycloak={this.state.keycloak} />\n          </div>\n        );\n      }\n    }\n    return <div>Initializing Keycloak...</div>;\n  }\n}\nexport default Secured;\n","import React, { Component } from 'react';\nimport { BrowserRouter, Route, Link } from 'react-router-dom';\nimport Welcome from './Welcome';\nimport Secured from './Secured';\nimport Logout from './Logout';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"container\">\n          <ul>\n            <li>\n              <Link to=\"/\">public component</Link>\n            </li>\n            <li>\n              <Link to=\"/secured\">secured component</Link>\n            </li>\n            <li>\n              <Link to=\"/logout\">logout</Link>\n            </li>\n          </ul>\n          <Route exact path=\"/\" component={Welcome} />\n          <Route path=\"/secured\" component={Secured} />\n          <Route path=\"/logout\" component={Logout} />\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}